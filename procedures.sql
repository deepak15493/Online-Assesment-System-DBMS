create or replace PROCEDURE SP_ADDCOURSE
(
  P_ID IN VARCHAR2,
  C_ID IN VARCHAR2,
  C_NAME IN VARCHAR2,
  START_DATE IN VARCHAR2,
  END_DATE IN VARCHAR2,
  MAX_ALLOWED_STUDENT IN INTEGER,
  C_LEVEL IN VARCHAR2
) AS 
BEGIN

    INSERT INTO COURSE(C_ID, CNAME, ST_DATE, END_DATE, NO_OF_ENROLLED_STUDENT, MAX_ALLOWED_STUDENT, C_LEVEL, TAUGHT_BY)
    VALUES(C_ID, C_NAME, TO_TIMESTAMP(START_DATE,'DD-MON-RRRR HH24:MI:SS.FF'), TO_TIMESTAMP(END_DATE,'DD-MON-RRRR HH24:MI:SS.FF'), 0, MAX_ALLOWED_STUDENT, C_LEVEL, P_ID);

END SP_ADDCOURSE;

GO;

create or replace PROCEDURE SP_ADDQUESTION
(
  COURSEID IN VARCHAR2,
  TOPICNAME IN VARCHAR2,
  DIFFLEVEL IN INTEGER,
  HINT IN VARCHAR2,
  QTEXT IN VARCHAR2,
  RTEXT IN VARCHAR2,
  ISPARAMETRIC IN INTEGER,
  SOLUTION IN VARCHAR2,
  ANS1 IN VARCHAR2,
  ANS2 IN VARCHAR2,
  ANS3 IN VARCHAR2,
  ANS4 IN VARCHAR2,
  p_cursor in out types.cursorType
) AS 
TID INTEGER;
QBANKID INTEGER;
QID INTEGER;
BEGIN
    SELECT T_ID INTO TID FROM TOPICNEW WHERE TNAME = TOPICNAME;
    SELECT DISTINCT QBANK_ID INTO QBANKID FROM QUESTION_BANKNEW WHERE C_ID=COURSEID;
    INSERT INTO QUESTIONSNEW(T_ID, DIFF_LEVEL, HINT, QUESTION_TEXT, ISPARAMETRIC, QBANK_ID, SOLUTION, ROOT_TEXT)
    VALUES(TID, DIFFLEVEL, HINT, QTEXT, ISPARAMETRIC, QBANKID, SOLUTION, RTEXT);    
    SELECT MAX(Q_ID) INTO QID FROM QUESTIONSNEW;    
    INSERT INTO ANSWERSNEW(A_ID, Q_ID, ANSWER, IS_CORRECT)
    VALUES(1, QID, ANS1, 1);
    INSERT INTO ANSWERSNEW(A_ID, Q_ID, ANSWER, IS_CORRECT)
    VALUES(2, QID, ANS2, 0);
    INSERT INTO ANSWERSNEW(A_ID, Q_ID, ANSWER, IS_CORRECT)
    VALUES(3, QID, ANS3, 0);
    INSERT INTO ANSWERSNEW(A_ID, Q_ID, ANSWER, IS_CORRECT)
    VALUES(4, QID, ANS4, 0);    
     open p_cursor for
    SELECT MAX(Q_ID) FROM QUESTIONSNEW;
END SP_ADDQUESTION;

GO;

create or replace PROCEDURE SP_ADDTA
(
  PROFID IN VARCHAR2 ,
  TAID IN VARCHAR2 ,
  COURSEID IN VARCHAR2
) AS 
BEGIN

  INSERT INTO COURSE_TA(C_ID, USER_ID)
  --SELECT * FROM (SELECT TAID, COURSEID) AS TMP
  --WHERE NOT EXISTS(SELECT C_ID, USER_ID FROM COURSE_TA WHERE USER_ID=TAID AND C_ID=COURSEID)
  VALUES(COURSEID, TAID);

END SP_ADDTA;

GO;

create or replace PROCEDURE SP_ADDTOPIC
(
  COURSEID IN VARCHAR2,
  TOPICNAME IN VARCHAR2
) AS 

TID NUMBER;

BEGIN

    SELECT MAX(T_ID)+1 INTO TID FROM TOPICNEW;

    INSERT INTO TOPICNEW(T_ID, TNAME, C_ID)
    VALUES(TID, TOPICNAME, COURSEID);

END SP_ADDTOPIC;

GO;

create or replace PROCEDURE SP_ATTEMPT_HW1_NOT_HW2 
(
  COURSEID IN VARCHAR2 
, p_cursor in out types.cursorType
) AS 
BEGIN
open p_cursor for
SELECT U.FNAME,U.LNAME
FROM EXERCISE_INSTANCENEW EI,USERS U
WHERE EI.USER_ID=U.USER_ID AND EI.EX_ID IN (SELECT EX_ID FROM (SELECT EX_ID,C_ID ,ROWNUM R FROM EXERCISE_OUTLINENEW WHERE C_ID=COURSEID)  WHERE R=1) 
     AND EI.USER_ID NOT IN (SELECT EI.USER_ID
                            FROM EXERCISE_INSTANCENEW EI
                            WHERE EI.EX_ID IN (SELECT EX_ID FROM (SELECT EX_ID,C_ID ,ROWNUM R FROM EXERCISE_OUTLINENEW WHERE C_ID=COURSEID)  WHERE R=2) );
END SP_ATTEMPT_HW1_NOT_HW2;

GO;

create or replace PROCEDURE SP_CREATEEXERCISE 
(
 USERID IN VARCHAR2, 
 COURSE_ID IN VARCHAR2, 
 TOPIC IN VARCHAR2 ,
 ENAME IN VARCHAR2,
 STARTDATE IN VARCHAR2,
 ENDDATE IN VARCHAR2,
 TOTAL_QUES IN NUMBER,
 NO_OF_RETRIES IN NUMBER,
 CORRECT_POINTS  IN NUMBER,
 PENALTY IN NUMBER,
 EX_TYPE IN VARCHAR2,
 SCORING_POLICY IN VARCHAR2,
 RESULT OUT NUMBER
) AS 
prof_value_exist INT;
ta_value_exist INT;
ex_rows INT;
after_rows int;
qbankid INT;

temp varchar2(20);
BEGIN

   select count(*) into prof_value_exist from course where taught_by=USERID and c_id = COURSE_ID;
   select count(*) into ta_value_exist from course_ta where user_id=USERID and c_id = COURSE_ID;
   select count(*) into ex_rows from EXERCISE_OUTLINENEW;

   IF (prof_value_exist>0 or ta_value_exist>0)
   then
   select QBANK_ID INTO qbankid from QUESTION_BANKNEW where C_ID = COURSE_ID;
   IF(qbankid IS NOT NULL)
   THEN

   INSERT INTO EXERCISE_OUTLINENEW (ENAME,ST_DATE,END_DATE,TOTAL_QUES,RETRIES, CORRECT_POINTS,PENALTY,SCORING_POLICY,EX_TYPE,QBANK_ID,C_ID,CREATED_BY_USER)
   VALUES (ENAME,TO_TIMESTAMP(STARTDATE,'DD-MON-RRRR HH24:MI:SS.FF'),TO_TIMESTAMP(ENDDATE,'DD-MON-RRRR HH24:MI:SS.FF'),TOTAL_QUES,NO_OF_RETRIES,CORRECT_POINTS,PENALTY,SCORING_POLICY,EX_TYPE,qbankid,COURSE_ID,USERID);
   SELECT COUNT(*) into after_rows from EXERCISE_OUTLINENEW;

   if(after_rows>ex_rows)
   then 
     SELECT MAX(EX_ID) INTO RESULT FROM EXERCISE_OUTLINENEW;

   end if;
   ELSE
   DBMS_OUTPUT.PUT_LINE('QBANK_ID DOES NOT EXIST');
   END IF;
   ELSE
   DBMS_OUTPUT.PUT_LINE('PROF OR TA NOT VALID');
   end if;

   EXCEPTION 
   WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO DATA FOUND EXCEPTION');
    RAISE;
    WHEN PROGRAM_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('SQL HAS AN INTERNAL PROBLEM');
    RAISE; 
   WHEN OTHERS THEN
   DBMS_OUTPUT.PUT_LINE('SOME EXCEPTION OCCURED');
    RAISE;
END SP_CREATEEXERCISE;


GO;


create or replace PROCEDURE SP_CURRENTOPENHWS
(
COURSEID IN VARCHAR2,
IN_PARAMETER IN NUMBER,
p_cursor in out types.cursorType
)
AS
BEGIN
    IF(IN_PARAMETER=1)
    THEN
    open p_cursor for
    SELECT EX_ID, ENAME FROM EXERCISE_OUTLINENEW WHERE C_ID=COURSEID AND END_DATE>=SYSTIMESTAMP AND ST_DATE <=SYSTIMESTAMP;
    ELSE 
    IF(IN_PARAMETER=2)
    THEN
    open p_cursor for
    SELECT EX_ID, ENAME FROM EXERCISE_OUTLINENEW WHERE C_ID=COURSEID AND END_DATE<SYSTIMESTAMP;
    ELSE
    DBMS_OUTPUT.PUT_LINE('INVALID VALUE PROVIDED IN PARAMETERS');
    END IF;
    END IF;
    EXCEPTION 
     WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('NO DATA FOUND EXCEPTION');
     RAISE;
     WHEN PROGRAM_ERROR THEN
     DBMS_OUTPUT.PUT_LINE('SQL HAS AN INTERNAL PROBLEM');
     RAISE; 
     WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('SOME EXCEPTION OCCURED');
     RAISE;
END SP_CURRENTOPENHWS;


GO;

create or replace PROCEDURE SP_DROP_STUDENT
(
USERID IN VARCHAR2,
STUID IN VARCHAR2,
CID IN VARCHAR2,
MSG OUT VARCHAR2
)
AS
prof_value_exist INT;
ta_value_exist INT;
stu_value_exist INT;
zero_count number;
BEGIN
    select count(*) into prof_value_exist from course where taught_by=USERID and c_id = CID;
    select count(*) into ta_value_exist from course_ta where user_id=USERID and c_id = CID;
    select count(*) into stu_value_exist from COURSE_ENROLLMENT where USER_ID = STUID AND C_ID=CID;
    select NO_OF_ENROLLED_STUDENT into zero_count from course where c_id=CID;
    IF (zero_count > 0)
    THEN
    IF (stu_value_exist>0)
    THEN
    IF (prof_value_exist>0 OR ta_value_exist>0)
    THEN
    DELETE FROM COURSE_ENROLLMENT WHERE C_ID=CID AND USER_ID=STUID;
    UPDATE COURSE SET NO_OF_ENROLLED_STUDENT = NO_OF_ENROLLED_STUDENT - 1 WHERE c_id=CID;
    MSG := 'SUCCESS';
    ELSE
    MSG := 'PROF OR TA NOT ALLOWED TO DELETE/INVALID ACCESS';
    END IF;
    ELSE
    MSG := 'STUDENT YOU WANT TO DELETE IS NOT ENROLLED IN COURSE';
    END IF;
    ELSE
    MSG := 'NO ROWS TO DELETE';
    END IF;
    EXCEPTION 
     WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('NO DATA FOUND EXCEPTION');
     RAISE;
     WHEN PROGRAM_ERROR THEN
     DBMS_OUTPUT.PUT_LINE('SQL HAS AN INTERNAL PROBLEM');
     RAISE; 
     WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('SOME EXCEPTION OCCURED');
     RAISE;
END SP_DROP_STUDENT;


GO;

create or replace PROCEDURE SP_DROPTA
(
  PROFID IN VARCHAR2 ,
  TAID IN VARCHAR2 ,
  COURSEID IN VARCHAR2
) AS 

BEGIN

  DELETE FROM COURSE_TA 
  WHERE C_ID=COURSEID AND USER_ID=TAID;

END SP_DROPTA;


GO;

create or replace PROCEDURE SP_EDITPROFILE
(
  USERID IN VARCHAR2 ,
  FNAME IN VARCHAR2 ,
  LNAME IN VARCHAR2
) AS 
BEGIN

  UPDATE USERS 
  SET FNAME=FNAME, LNAME=LNAME
  WHERE USER_ID = USERID;

END SP_EDITPROFILE;


GO;

create or replace PROCEDURE sp_ENROLL_STUDENT
(
userid IN VARCHAR2,
STUID IN VARCHAR2,
CID IN VARCHAR2,
MSG OUT VARCHAR2
)
AS
max_val NUMBER;
count_val NUMBER;
prof_value_exist INT;
ta_value_exist INT;
stu_value_exist INT;
is_ta INT;
BEGIN
    select count(*) into prof_value_exist from course where taught_by=userid and c_id = CID;
    select count(*) into ta_value_exist from course_ta where user_id=userid and c_id = CID;
    select count(*) into stu_value_exist from COURSE_ENROLLMENT where USER_ID = STUID AND c_id = CID;
    select count(*) into is_ta from COURSE_TA where USER_ID = STUID and c_id = CID;
    select MAX_ALLOWED_STUDENT into max_val from COURSE where c_id=CID;
    select NO_OF_ENROLLED_STUDENT into count_val FROM COURSE where c_id=CID;
    IF (max_val>count_val)
    THEN
    IF (prof_value_exist>0 or ta_value_exist>0)
    THEN
    IF (stu_value_exist>0 or is_ta>0)
    THEN
    MSG := 'STUDENT ALREADY EXIST IN COURSE OR STUDENT YOU WANT TO ENROLL IS TA OF THE SAME COURSE';
    ELSE
    INSERT INTO COURSE_ENROLLMENT (C_ID,USER_ID) VALUES (CID,STUID);
    UPDATE COURSE SET NO_OF_ENROLLED_STUDENT = NO_OF_ENROLLED_STUDENT + 1 WHERE c_id=CID;
    MSG := 'SUCCESS';
    END IF;
    ELSE
    MSG := 'PROF OR TA NOT ALLOWED TO ENROLL/ INVALID ACCESS';
    END IF;
    ELSE
    MSG := 'MAX COUNT EXCEED';
    END IF;
    EXCEPTION 
     WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE('NO DATA FOUND EXCEPTION');
     RAISE;
     WHEN PROGRAM_ERROR THEN
     DBMS_OUTPUT.PUT_LINE('SQL HAS AN INTERNAL PROBLEM');
     RAISE; 
     WHEN OTHERS THEN
     DBMS_OUTPUT.PUT_LINE('SOME EXCEPTION OCCURED');
     RAISE;
END sp_ENROLL_STUDENT;


GO;

create or replace PROCEDURE SP_ENROLLEDCOURSES
(
userid in VARCHAR2,
p_cursor in out types.cursorType 
)
AS
BEGIN
    open p_cursor for
    select e.c_id,c.cname from COURSE_ENROLLMENT e 
    left join course c on e.c_id=c.c_id
    where USER_ID=userid; 
END SP_ENROLLEDCOURSES;


GO;

create or replace PROCEDURE SP_ENROLLMENT_FOR_ALL_COURSES
(
p_cursor in out types.cursorType
)
AS 
BEGIN
  open p_cursor for
  select CE.C_ID,C.CNAME,COUNT(CE.C_ID) as NOOFSTUDS 
  from COURSE_ENROLLMENT CE,COURSE C
  WHERE CE.C_ID=C.C_ID
  group by CE.C_ID,C.CNAME order by CE.C_ID ;
END SP_ENROLLMENT_FOR_ALL_COURSES;

GO;

create or replace PROCEDURE SP_GET_ALL_QUES_FROM_QB 
(
  COURSEID IN VARCHAR2 ,
   p_cursor in out types.cursorType
) AS 
BEGIN
 open p_cursor for
 SELECT Q.Q_ID,Q.QUESTION_TEXT
 FROM QUESTIONSNEW Q,QUESTION_BANKNEW QB
 WHERE QB.C_ID=COURSEID AND Q.QBANK_ID=QB.QBANK_ID;
END SP_GET_ALL_QUES_FROM_QB;

GO;

create or replace PROCEDURE SP_GET_EXERCISE_DETAILS 
(
  EXID IN VARCHAR2 ,
   p_cursor in out types.cursorType
) AS 
BEGIN
   open p_cursor for
   select *
   from EXERCISE_OUTLINENEW EO WHERE EO.EX_ID=EXID ;
END SP_GET_EXERCISE_DETAILS;


GO;

create or replace PROCEDURE SP_GET_EXID_QID_MAPPING 
(
  EXID IN NUMBER ,
  p_cursor in out types.cursorType
) AS 
BEGIN
  open p_cursor for
  SELECT Q_ID FROM EXID_QUEID WHERE EX_ID=EXID;
END SP_GET_EXID_QID_MAPPING;

GO;

create or replace PROCEDURE SP_GET_QID_FOR_TOPIC 
(
  TID IN NUMBER 
, 
p_cursor in out types.cursorType
) AS 
BEGIN
  open p_cursor for
  SELECT Q_ID,QUESTION_TEXT FROM QUESTIONSNEW WHERE T_ID=TID ;
END SP_GET_QID_FOR_TOPIC;

GO;


create or replace PROCEDURE SP_GET_SCORE_SCORING_POLICY 
(
  STUDENTID IN VARCHAR2 ,
  COURSEID IN VARCHAR2 , 
  HWID IN VARCHAR2 ,
  EXNAME OUT VARCHAR2,
  FSCORE OUT NUMBER
) AS 
POLICY VARCHAR2(20);
LASTATTEMPT NUMBER;
UPDATESTMT NUMBER;
BEGIN
  SELECT EO.SCORING_POLICY,EO.ENAME INTO POLICY,EXNAME
  FROM EXERCISE_OUTLINENEW EO 
  WHERE EO.EX_ID=HWID;



  IF(POLICY='A')
      THEN 
      DBMS_OUTPUT.PUT_LINE('Average policy');
      SELECT AVG(A.OBTAINED_SCORE) INTO FSCORE
      FROM ATTEMPTSNEW A
      WHERE A.INSTANCE_ID IN(SELECT EI.INSTANCE_ID FROM EXERCISE_INSTANCENEW EI WHERE EI.EX_ID=HWID AND EI.USER_ID=STUDENTID AND EI.C_ID=COURSEID );

    IF(FSCORE IS NULL)
    THEN FSCORE:=0;
    END IF;
    DBMS_OUTPUT.PUT_LINE('BEFORE UPDATE');
     UPDATE FINAL_SCORES
     SET SCORE=FSCORE
     WHERE  EX_ID=HWID AND C_ID=COURSEID AND USER_ID=STUDENTID
     RETURNING 1 INTO UPDATESTMT;

     
     IF(UPDATESTMT IS NULL)
     THEN
     DBMS_OUTPUT.PUT_LINE(FSCORE);
     INSERT INTO FINAL_SCORES 
      VALUES(HWID,COURSEID,STUDENTID,FSCORE);

      DBMS_OUTPUT.PUT_LINE('END OF UPDATE');
    END IF;

  ELSIF (POLICY='M') 
  THEN
      DBMS_OUTPUT.PUT_LINE('Maximum policy');
      SELECT MAX(A.OBTAINED_SCORE) INTO FSCORE
      FROM ATTEMPTSNEW A
      WHERE A.INSTANCE_ID IN(SELECT EI.INSTANCE_ID FROM EXERCISE_INSTANCENEW EI WHERE EI.EX_ID=HWID AND EI.USER_ID=STUDENTID AND EI.C_ID=COURSEID );



      UPDATE FINAL_SCORES
     SET SCORE=FSCORE
     WHERE  EX_ID=HWID AND C_ID=COURSEID AND USER_ID=STUDENTID;
     UPDATESTMT:=SQL%ROWCOUNT;

     IF(UPDATESTMT IS NULL)
     THEN
     INSERT INTO FINAL_SCORES 
      VALUES(HWID,COURSEID,STUDENTID,FSCORE);
    END IF;


  ELSIF(POLICY='L') 
      THEN
      DBMS_OUTPUT.PUT_LINE('latest policy');
      SELECT MAX(A.AT_ID) INTO LASTATTEMPT
      FROM ATTEMPTSNEW A
      WHERE A.INSTANCE_ID IN(SELECT EI.INSTANCE_ID FROM EXERCISE_INSTANCENEW EI WHERE EI.EX_ID=HWID AND EI.USER_ID=STUDENTID AND EI.C_ID=COURSEID );

       SELECT A.OBTAINED_SCORE INTO FSCORE
       FROM ATTEMPTSNEW A
       WHERE A.INSTANCE_ID =LASTATTEMPT;



       UPDATE FINAL_SCORES
     SET SCORE=FSCORE
     WHERE  EX_ID=HWID AND C_ID=COURSEID AND USER_ID=STUDENTID
     RETURNING 1 INTO UPDATESTMT;

     IF(UPDATESTMT IS NULL)
     THEN
     INSERT INTO FINAL_SCORES 
      VALUES(HWID,COURSEID,STUDENTID,FSCORE);
    END IF;
END IF;


END SP_GET_SCORE_SCORING_POLICY;


GO;

create or replace PROCEDURE SP_GETATTEMPTCOUNT 
(
  STUDENTID IN VARCHAR2 ,
  EXID IN VARCHAR2,
  NAME OUT VARCHAR2,
  ATTEMPTED OUT NUMBER,
  REMAINING OUT NUMBER

) AS 
temp number;
BEGIN
  SELECT COUNT(*) INTO ATTEMPTED 
  FROM EXERCISE_INSTANCENEW EI
  WHERE EI.EX_ID=EXID AND EI.USER_ID=STUDENTID;

  SELECT EO.ENAME INTO NAME
  FROM EXERCISE_OUTLINENEW EO 
  WHERE EO.EX_ID=EXID;

  SELECT EO.RETRIES INTO TEMP
  FROM EXERCISE_OUTLINENEW EO 
  WHERE EO.EX_ID=EXID;

  REMAINING:=TEMP-ATTEMPTED+1;

END SP_GETATTEMPTCOUNT;

GO;

create or replace PROCEDURE SP_GETATTEMPTDETAILS 
(
  STUDENTID IN VARCHAR2 ,
  ATTEMPTID IN NUMBER ,
  p_cursor in out types.cursorType
) AS 
ENDDATE TIMESTAMP;
BEGIN



  SELECT EO.END_DATE INTO ENDDATE
  FROM EXERCISE_INSTANCENEW EI,EXERCISE_OUTLINENEW EO
  WHERE EI.EX_ID=EO.EX_ID AND EI.INSTANCE_ID=ATTEMPTID;

  DBMS_OUTPUT.PUT_LINE(ENDDATE);

  IF(CURRENT_TIMESTAMP >ENDDATE)
    THEN 
       DBMS_OUTPUT.PUT_LINE('SHOWING ALL BECAUSE DATE IS EXPIRED');
       open p_cursor for
       SELECT SD.Q_ID,Q.QUESTION_TEXT,SD.GIVEN_ANSWER,A.ANSWER AS CORRECT_ANSWER,Q.SOLUTION
       FROM SUBMISSION_DETAILSNEW SD,QUESTIONSNEW Q,ANSWERSNEW A
       WHERE SD.INSTANCE_ID=ATTEMPTID AND  SD.USER_ID=STUDENTID AND SD.Q_ID=Q.Q_ID AND SD.Q_ID=A.Q_ID AND A.IS_CORRECT=1;
  ELSE
     open p_cursor for
       SELECT SD.Q_ID,Q.QUESTION_TEXT,SD.GIVEN_ANSWER,Q.HINT,'YET TO BE DECLARED'
       FROM SUBMISSION_DETAILSNEW SD,QUESTIONSNEW Q
       WHERE SD.INSTANCE_ID=ATTEMPTID AND  SD.USER_ID=STUDENTID AND SD.Q_ID=Q.Q_ID;

 END IF;



END SP_GETATTEMPTDETAILS;


GO;

create or replace PROCEDURE SP_GETATTEMPTS 
(
  STUDENTID IN VARCHAR2 
, COURSEID IN VARCHAR2 
, HWID IN NUMBER 
, p_cursor in out types.cursorType
) AS 

BEGIN
  open p_cursor for
  SELECT A.INSTANCE_ID ,A.TIME_OF_ATTEMPT,A.OBTAINED_SCORE
  FROM ATTEMPTSNEW A
  WHERE A.INSTANCE_ID IN(SELECT EI.INSTANCE_ID FROM EXERCISE_INSTANCENEW EI WHERE EI.EX_ID=HWID AND EI.USER_ID=STUDENTID AND EI.C_ID=COURSEID );

END SP_GETATTEMPTS;


GO;

create or replace PROCEDURE SP_GETFINALSCOREFORALL 
(
  COURSEID IN VARCHAR2,
  p_cursor in out types.cursorType
) AS 
BEGIN
  open p_cursor for
  SELECT U.FNAME,U.LNAME,F.EX_ID,F.SCORE 
  FROM USERS U,FINAL_SCORES F
  WHERE U.USER_ID=F.USER_ID AND F.C_ID=COURSEID;
END SP_GETFINALSCOREFORALL;


GO;

create or replace PROCEDURE SP_GETHWS
(
cid in VARCHAR2,
p_cursor in out types.cursorType 
)
AS
BEGIN
    open p_cursor for
    select ex_id,ename,st_date,end_date from EXERCISE_OUTLINENEW where c_id=cid;
END SP_GETHWS;


GO;

create or replace PROCEDURE SP_GETQUESTIONSFORTOPIC
(
  TID IN NUMBER,
  p_cursor in out types.cursorType
) AS 
BEGIN

    open p_cursor for
    SELECT Q.Q_ID, Q.DIFF_LEVEL, Q.HINT, Q.QUESTION_TEXT, Q.SOLUTION, Q.ROOT_TEXT, A.ANSWER, A.IS_CORRECT
    FROM QUESTIONSNEW Q LEFT JOIN ANSWERSNEW A
    ON Q.Q_ID=A.Q_ID
    WHERE Q.T_ID=TID;

END SP_GETQUESTIONSFORTOPIC;


GO;

create or replace PROCEDURE SP_INSERTFINALSCOREFORHW
(
  STUDENTID IN VARCHAR2 ,
  COURSEID IN VARCHAR2 , 
  HWID IN VARCHAR2 ,
  EXNAME OUT VARCHAR2,
  SCORE OUT NUMBER
) AS 
POLICY VARCHAR2(20);
LASTATTEMPT NUMBER;
BEGIN
  SELECT EO.SCORING_POLICY,EO.ENAME INTO POLICY,EXNAME
  FROM EXERCISE_OUTLINENEW EO 
  WHERE EO.EX_ID=HWID;



  IF(POLICY='A')
      THEN 
      DBMS_OUTPUT.PUT_LINE('Average policy');
      SELECT ROUND(AVG(A.OBTAINED_SCORE),2) INTO SCORE
      FROM ATTEMPTSNEW A
      WHERE A.INSTANCE_ID IN(SELECT EI.INSTANCE_ID FROM EXERCISE_INSTANCENEW EI WHERE EI.EX_ID=HWID AND EI.USER_ID=STUDENTID AND EI.C_ID=COURSEID );
      INSERT INTO FINAL_SCORES 
      VALUES(HWID,COURSEID,STUDENTID,SCORE);

  ELSIF (POLICY='M') 
  THEN
      DBMS_OUTPUT.PUT_LINE('Maximum policy');
      SELECT MAX(A.OBTAINED_SCORE) INTO SCORE
      FROM ATTEMPTSNEW A
      WHERE A.INSTANCE_ID IN(SELECT EI.INSTANCE_ID FROM EXERCISE_INSTANCENEW EI WHERE EI.EX_ID=HWID AND EI.USER_ID=STUDENTID AND EI.C_ID=COURSEID );
      INSERT INTO FINAL_SCORES 
      VALUES(HWID,COURSEID,STUDENTID,SCORE);

  ELSIF(POLICY='L') 
      THEN
      DBMS_OUTPUT.PUT_LINE('latest policy');
      SELECT MAX(A.AT_ID) INTO LASTATTEMPT
      FROM ATTEMPTSNEW A
      WHERE A.INSTANCE_ID IN(SELECT EI.INSTANCE_ID FROM EXERCISE_INSTANCENEW EI WHERE EI.EX_ID=HWID AND EI.USER_ID=STUDENTID AND EI.C_ID=COURSEID );

       SELECT A.OBTAINED_SCORE INTO SCORE
       FROM ATTEMPTSNEW A
       WHERE A.INSTANCE_ID =LASTATTEMPT;

       INSERT INTO FINAL_SCORES 
       VALUES(HWID,COURSEID,STUDENTID,SCORE);

  END IF;


END SP_INSERTFINALSCOREFORHW;


GO;

create or replace PROCEDURE SP_LOGIN 
(
  USERNAME IN VARCHAR2 
, PWD IN VARCHAR2
, userType IN VARCHAR2
, FLAG out INTEGER
) AS 
BEGIN

IF userType = 'P' THEN
    SELECT count(*) INTO FLAG from users u 
    where u.user_ID=USERNAME and u.PASSWORD=PWD and u.TYPE='P';
END IF;

IF userType = 'S' THEN
    SELECT count(*) INTO FLAG from users u 
    where u.user_ID=USERNAME and u.PASSWORD=PWD and (u.TYPE='G' OR u.TYPE='U');
END IF;

IF userType = 'T' THEN
    SELECT count(*) INTO FLAG 
    from users u LEFT JOIN COURSE_TA ON u.USER_ID=COURSE_TA.C_ID 
    where u.user_ID=USERNAME and u.PASSWORD=PWD and (u.TYPE='G' OR u.TYPE='U');
END IF;

END SP_LOGIN;


GO;

create or replace PROCEDURE SP_MAP_EXID_QID 
(
  EXID IN NUMBER 
, QID IN NUMBER 
) AS 
BEGIN
  INSERT INTO EXID_QUEID
  VALUES(EXID,QID);
END SP_MAP_EXID_QID;


GO;

create or replace PROCEDURE SP_SAVE_EACH_QUESTION_ATTEMPT 
(
  INSTANCEID IN NUMBER ,
  USERID IN VARCHAR2 ,
  GIVENANSWER IN VARCHAR2 ,
  QID IN NUMBER 
) AS 
BEGIN
  INSERT INTO SUBMISSION_DETAILSNEW
  VALUES(INSTANCEID,INSTANCEID,USERID,GIVENANSWER,QID);
END SP_SAVE_EACH_QUESTION_ATTEMPT;


GO;

create or replace PROCEDURE SP_SEARCHQUESTION
(
  QUESTIONID IN INTEGER,
  p_cursor in out types.cursorType
) AS 
BEGIN
open p_cursor for
    select Q.Q_ID, Q.QUESTION_TEXT, Q.HINT, Q.SOLUTION, A.ANSWER
    from QUESTIONSNEW Q
    LEFT JOIN ANSWERSNEW A ON Q.Q_ID=A.Q_ID
    Where Q.Q_ID = QUESTIONID ORDER BY A.A_ID;
END SP_SEARCHQUESTION;


GO;


create or replace PROCEDURE SP_SET_ATTEMPT 
(
  COURSEID IN VARCHAR2,
  EXID IN NUMBER,
  ATTEMPTID IN NUMBER,
  USERID IN VARCHAR2 ,
  OBTAINEDSCORE IN NUMBER ,
  NEWATID OUT NUMBER
) AS 
TIME TIMESTAMP;
BEGIN


  IF(ATTEMPTID=-1)
   THEN
     INSERT INTO EXERCISE_INSTANCENEW (EX_ID,USER_ID,C_ID)
        VALUES(EXID,USERID,COURSEID);

     INSERT INTO ATTEMPTSNEW(USER_ID,TIME_OF_ATTEMPT,OBTAINED_SCORE)
         VALUES(USERID,CURRENT_TIMESTAMP,OBTAINEDSCORE);
     SELECT MAX(A.AT_ID) INTO NEWATID 
     FROM ATTEMPTSNEW A;

   ELSE
     UPDATE ATTEMPTSNEW
     SET OBTAINED_SCORE=OBTAINEDSCORE
     WHERE AT_ID=ATTEMPTID;

   END IF;

END SP_SET_ATTEMPT;


GO;

create or replace PROCEDURE SP_SHOWATTEMPTFORSUBJECT 
(
  COURSEID IN VARCHAR2 ,
  p_cursor in out types.cursorType
) AS 
BEGIN
  open p_cursor for
  SELECT A.AT_ID,A.USER_ID,EI.EX_ID,A.OBTAINED_SCORE,A.TIME_OF_ATTEMPT
  FROM ATTEMPTSNEW A,EXERCISE_INSTANCENEW EI
  WHERE EI.INSTANCE_ID=A.INSTANCE_ID AND EI.INSTANCE_ID IN (SELECT INSTANCE_ID FROM EXERCISE_INSTANCENEW WHERE C_ID=COURSEID);
END SP_SHOWATTEMPTFORSUBJECT;


GO;


create or replace PROCEDURE SP_SIGNUP
(
USERID IN VARCHAR2,
FNAME IN VARCHAR2,
LNAME IN VARCHAR2,
UTYPE IN VARCHAR2,
PWD IN VARCHAR2,
URID OUT NUMBER
)
AS
BEGIN
    URID:=-1;
    SELECT COUNT(*) INTO URID FROM USERS WHERE USER_ID=USERID;

    IF URID = 0
    THEN
        INSERT INTO USERS
        VALUES (USERID, FNAME, LNAME, UTYPE, PWD);
        URID:=2;
    END IF;

END SP_SIGNUP;


GO;

create or replace PROCEDURE SP_VIEWALLTOPICS
(
  COURSEID IN VARCHAR2,
  p_cursor in out types.cursorType
) AS 

BEGIN
    open p_cursor for
    SELECT T_ID, TNAME
    FROM TOPICNEW
    WHERE C_ID=COURSEID;

END SP_VIEWALLTOPICS;


GO;

create or replace PROCEDURE SP_VIEWCOURSEDETAILS 
(
  COURSE_ID IN OUT VARCHAR2 , 
  p_cursor IN out types.cursorType
) AS 
BEGIN
  open p_cursor for
  SELECT C.C_ID,C.CNAME,C.ST_DATE,C.END_DATE,C.NO_OF_ENROLLED_STUDENT,C.MAX_ALLOWED_STUDENT,C.C_LEVEL,C.TAUGHT_BY
  from COURSE C
  where C.C_ID=COURSE_ID;
END SP_VIEWCOURSEDETAILS;


GO;


create or replace PROCEDURE SP_VIEWCOURSES
(
  USERID IN VARCHAR2,
  p_cursor in out types.cursorType
) AS 
BEGIN
open p_cursor for
    select E.C_ID, C.CNAME
    from COURSE_ENROLLMENT E
    LEFT JOIN COURSE C ON C.C_ID=E.C_ID
    Where E.USER_ID = USERID;
END SP_VIEWCOURSES;


GO;


create or replace PROCEDURE SP_VIEWEXERCISE
(
  EX_ID IN NUMBER,
  p_cursor in out types.cursorType
) AS 
BEGIN
    open p_cursor for
    SELECT ENAME, ST_DATE, END_DATE, TOTAL_QUES, RETRIES, CREATED_BY_USER
    FROM EXERCISE_OUTLINENEW WHERE EX_ID = EX_ID;

END SP_VIEWEXERCISE;


GO;

create or replace PROCEDURE SP_VIEWPROFCOURSES
(
  PROFID IN VARCHAR2 ,
  p_cursor in out types.cursorType
) AS 
BEGIN
  open p_cursor for
  SELECT C.C_ID, C.CNAME, C.ST_DATE, C.END_DATE, U.FNAME || ' ' || U.LNAME AS PROFNAME
  FROM COURSE C LEFT JOIN USERS U ON C.TAUGHT_BY = U.USER_ID
  WHERE C.TAUGHT_BY = PROFID;

END SP_VIEWPROFCOURSES;


GO;

create or replace PROCEDURE SP_VIEWPROFILE 
(
  USERID IN VARCHAR2 
, p_cursor in out types.cursorType
) AS 
BEGIN
open p_cursor for
  select FNAME, LNAME
  from USERS
  where USER_ID=USERID;
END SP_VIEWPROFILE;


GO;

create or replace PROCEDURE SP_VIEWPROFSTUDENTCOURSES
(
  PROFID IN VARCHAR2,
  STUDENT_ID IN VARCHAR2,
  p_cursor in out types.cursorType
) AS 
BEGIN

    open p_cursor for
    SELECT CR.C_ID, CR.CNAME FROM COURSE CR
    WHERE CR.C_ID IN
    (SELECT C.C_ID 
    FROM COURSE_ENROLLMENT C
    LEFT JOIN USERS U ON C.USER_ID=U.USER_ID
    WHERE C.USER_ID=STUDENT_ID) AND CR.TAUGHT_BY=PROFID;

END SP_VIEWPROFSTUDENTCOURSES;


GO;

create or replace PROCEDURE SP_VIEWQUESTIONBANK
(
  QBANKID IN NUMBER,
  C_ID IN VARCHAR2,
  p_cursor in out types.cursorType
) AS
BEGIN
    open p_cursor for
    SELECT Q.Q_ID, Q.QUESTION_TEXT, Q.DIFF_LEVEL
    FROM QUESTIONSNEW Q
    JOIN QUESTION_BANKNEW QB ON Q.QBANK_ID = QB.QBANK_ID
    WHERE Q.QBANK_ID = QBANKID AND QB.C_ID = C_ID;

END SP_VIEWQUESTIONBANK;


GO;

create or replace PROCEDURE SP_VIEWQUESTIONSFOREXERCISE
(
  EX_ID IN NUMBER,
  --QUESTION_ID OUT NUMBER,
  p_cursor in out types.cursorType
) AS 
BEGIN
    open p_cursor for
    SELECT EQ.Q_ID, Q.QUESTION_TEXT, A.ANSWER, A.IS_CORRECT
    FROM EXERCISE_CONTAINS_QNSNEW EQ
    LEFT JOIN QUESTIONSNEW Q ON EQ.Q_ID=Q.Q_ID
    LEFT JOIN ANSWERSNEW A ON Q.Q_ID=A.Q_ID
    WHERE EQ.EX_ID = EX_ID;

END SP_VIEWQUESTIONSFOREXERCISE;


GO;

create or replace PROCEDURE SP_VIEWSTUDENTCOURSESCORES
(
  STUDENTID IN VARCHAR2,
  COURSEID IN VARCHAR2,
  p_cursor in out types.cursorType
) AS 
BEGIN

    open p_cursor for
    SELECT A.INSTANCE_ID, A.OBTAINED_SCORE FROM ATTEMPTSNEW A
    WHERE A.INSTANCE_ID IN (SELECT EI.INSTANCE_ID
    FROM EXERCISE_INSTANCENEW EI
    WHERE EI.C_ID = COURSEID AND EI.USER_ID = STUDENTID);

END SP_VIEWSTUDENTCOURSESCORES;


GO;

create or replace PROCEDURE SP_VIEWSTUDENTREPORT
(
  STUDENT_ID IN VARCHAR2,
  p_cursor in out types.cursorType
) AS 
BEGIN
    open p_cursor for
    SELECT A.USER_ID, U.FNAME, U.LNAME, A.OBTAINED_SCORE
    FROM ATTEMPTSNEW A LEFT JOIN USERS U
    ON A.USER_ID = U.USER_ID
    WHERE A.USER_ID = STUDENT_ID;

END SP_VIEWSTUDENTREPORT;


GO;

create or replace PROCEDURE SP_VIEWTACOURSES
(
  TAID IN VARCHAR2 ,
  p_cursor in out types.cursorType
) AS 
BEGIN
  open p_cursor for
  SELECT C.C_ID, C.CNAME, C.ST_DATE, C.END_DATE, U.FNAME || ' ' || U.LNAME AS PROFNAME
  FROM COURSE_TA CT 
  LEFT JOIN COURSE C ON CT.C_ID = C.C_ID
  LEFT JOIN USERS U ON C.TAUGHT_BY=U.USER_ID
  WHERE CT.USER_ID = TAID;

END SP_VIEWTACOURSES;


GO;


